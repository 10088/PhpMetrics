{"name":"Phpmetrics","tagline":"Static metrics tool for PHP","body":"# PhpMetrics\r\n\r\nGives metrics about PHP project and classes.\r\n\r\n# Installation\r\n\r\n    curl -sS https://getcomposer.org/installer | php\r\n    php composer.phar install\r\n\r\n# Usage\r\n\r\n    php ./bin/metrics.php <folder or filename>\r\n\r\nWill output:\r\n\r\n\r\n```\r\nfile1.php:\r\n\tHalstead:\r\n\t\tVolume: 327.43\r\n\t\tLength: 86\r\n\t\tVocabulary: 14\r\n\t\tEffort: 163\r\n\t\tDifficulty: 0.5\r\n\t\tDelivred Bugs: 0.04\r\n\t\tTime: 9.1\r\n\tLOC:\r\n\t\tLOC: 68\r\n\t\tLogical LOC: 42\r\n\t\tCyclomatic complexity: 2\r\n\tMaintenability:\r\n\t\tMaintenability Index: 83.78\r\n\r\nfile2.php:\r\n    ...\r\n```\r\n\r\n## Bubbles chart\r\n\r\nYou can export the result to `json` with:\r\n\r\n    php ./bin/metrics.php --json <folder or filename> > report/bubbles/results.json\r\n\r\nTo preview the json, open the file `report/bubbles/index.html` in your browser.\r\n\r\n### Read report\r\n\r\n+ Each file is symbolized by a circle\r\n+ Size of the circle represents the Cyclomatic complexity\r\n+ Color of the circle represents te Maintenability Index\r\n+ Move your cursor on a circle to have details\r\n\r\nLarge red circles will be probably hard to maintain.\r\n\r\n### Example : Symfony2 Component\r\n\r\n[open full report](demo/symfony2-component/index.html)\r\n\r\n![Symfony2 report](demo/images/preview-symfony2-component.png)\r\n\r\n### Example : Zend Framework 2\r\n\r\n[open full report](demo/zendframework2/index.html)\r\n\r\n![Symfony2 report](demo/images/preview-zendframework2.png)\r\n\r\n\r\n# Metrics\r\n\r\n## Halstead complexity\r\n\r\nThis indicator provides:\r\n\r\n+ Program length (N)\r\n+ Vocabulary size (n)\r\n+ Program volume (V)\r\n+ Difficulty level (D)\r\n+ Effort to implement (E)\r\n+ Time to implement, in seconds (T)\r\n+ Number of delivered bugs (B)\r\n\r\n```\r\nN = N1 + N2\r\nn = n1 + n2\r\nV = N * log2(n)\r\nD = ( n1 / 2 ) * ( N2 / n2 )\r\nE = V * D\r\nT = E / 18\r\nB = ( E ** (2/3) ) / 3000\r\n```\r\n\r\n## Complexity index\r\n\r\nAccording Wikipedia, Maintainability Index is a software metric which measures how maintainable (easy to support and change) the source code is.\r\nThe maintainability index is calculated as a factored formula consisting of Lines Of Code, Cyclomatic Complexity and Halstead volume.\r\n\r\n    Maintainability Index = 171 - 5.2 * ln(Halstead Volume) - 0.23 * (Cyclomatic Complexity) - 16.2 * ln(Lines of Code))*100 / 171\r\n\r\nGenerally:\r\n\r\n+ 0-9 = Danger\r\n+ 10-19 = Warning\r\n+ 20-100 = Ok\r\n\r\n\r\n\r\n# Use it in code\r\n\r\n## Halstead\r\n\r\n```php\r\n$halstead = new \\Halstead\\Halstead(new \\Token\\TokenType());\r\n$rHalstead = $halstead->calculate($filename);\r\nvar_dump($rHalstead);\r\n```\r\n\r\n## PHPLoc\r\n\r\nThis component uses [phploc](https://github.com/sebastianbergmann/phploc).\r\n\r\n```php\r\n$loc = new \\Loc\\Loc();\r\n$rLoc = $loc->calculate($filename);\r\nvar_dump($rLoc);\r\n```\r\n\r\n## Maintenability Index\r\n\r\n```php\r\n$maintenability = new \\MaintenabilityIndex\\MaintenabilityIndex;\r\n$rMaintenability = $maintenability->calculate($rHalstead, $rLoc);\r\nvar_dump($rMaintenability);\r\n```\r\n\r\n# Author\r\n\r\n+ Jean-François Lépine <[blog.lepine.pro](http://blog.lepine.pro)>\r\n\r\n# Licence\r\n\r\nSee the LICENCE file","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}